import React, { useState } from 'react';
import { ChevronDown, ChevronUp, Info } from 'lucide-react';

// Reduced to just two cocktails with enhanced data
const cocktails = [
  {
    name: "Manhattan",
    ingredients: [
      { name: "Wild Turkey 101 Rye", amount: 2.0 },
      { name: "Sweet Vermouth", amount: 1.0 },
      { name: "Angostura Bitters", amount: 0.125 },
      { name: "Grand Marnier", amount: 0.25 }
    ],
    color: "#8B0000",
    garnish: "Cherry",
    glassware: "coupe",
    method: "stirred",
    description: "Classic whiskey cocktail with a perfect balance of sweet and bitter.",
    history: "The Manhattan dates back to the 1870s, supposedly created at the Manhattan Club in New York City. It has remained a cornerstone of classic cocktail culture for over 150 years."
  },
  {
    name: "Ready Fire Aim",
    ingredients: [
      { name: "Siete Misterios Mezcal", amount: 2.0 },
      { name: "Lime Juice", amount: 0.75 },
      { name: "Honey-Pineapple Syrup", amount: 0.75 },
      { name: "Bittermens Hellfire Bitters", amount: 0.125 }
    ],
    color: "#FFD700",
    garnish: "Lime Wheel",
    glassware: "coupe",
    method: "shaken",
    description: "Smoky mezcal with tropical sweetness and a spicy kick.",
    history: "A modern craft cocktail that showcases the complexity of mezcal balanced with tropical sweetness and spice. It's a perfect example of contemporary mixology's innovative approach to traditional spirits."
  }
];

const CocktailVisualizer = () => {
  const [selectedCocktail, setSelectedCocktail] = useState(cocktails[0]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [activeTab, setActiveTab] = useState('recipe');
  const [showTutorial, setShowTutorial] = useState(false);
  
  // Function to get gradient styles for cocktail color
  const getCocktailGradient = (color) => {
    return {
      background: `linear-gradient(to bottom, rgba(255,255,255,0.2) 0%, ${color} 30%, ${color} 100%)`,
      boxShadow: `0 0 20px ${color}40, 0 0 40px ${color}20`
    };
  };
  
  // Method icons/illustrations
  const getMethodIcon = (method) => {
    switch(method) {
      case "shaken":
        return (
          <div className="flex items-center">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-2">
              <path d="M7 2L17 2L17 6L14 10L14 20L10 20L10 10L7 6L7 2Z" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M10 4L14 4" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M5 8.5L7 8.5" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M17 8.5L19 8.5" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
            </svg>
            <span>Shaken</span>
          </div>
        );
      case "stirred":
        return (
          <div className="flex items-center">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-2">
              <path d="M7 2L17 2L17 14L7 14L7 2Z" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M10 4L14 4" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M12 14L12 20" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M9 20L15 20" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M9 9L15 9" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M12 7L12 11" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
            </svg>
            <span>Stirred</span>
          </div>
        );
      case "built":
        return (
          <div className="flex items-center">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-2">
              <path d="M7 2L17 2L17 16L7 16L7 2Z" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M7 6L17 6" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M7 10L17 10" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M7 14L17 14" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M10 18L14 18" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
              <path d="M12 18L12 21" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
            </svg>
            <span>Built</span>
          </div>
        );
      default:
        return <span>{method}</span>;
    }
  };
  
  const getGlassShape = () => {
    if (selectedCocktail.glassware === "coupe") {
      return (
        <div className="relative flex flex-col items-center">
          {/* Coupe glass shape */}
          <div className="relative w-48 h-32">
            <div className="absolute bottom-0 left-0 right-0 mx-auto w-40 h-16 rounded-b-full overflow-hidden border-2 border-b-0 border-l-0 border-r-0 border-t-2 border-gray-200 border-opacity-40">
              <div className="w-full h-full rounded-b-full" style={getCocktailGradient(selectedCocktail.color)}></div>
            </div>
            <div className="absolute bottom-0 left-0 right-0 mx-auto w-48 h-8 rounded-full overflow-hidden border-2 border-b-0 border-l-0 border-r-0 border-t-2 border-gray-200 border-opacity-40">
              <div className="w-full h-full rounded-full" style={getCocktailGradient(selectedCocktail.color)}></div>
            </div>
          </div>
          
          {/* Stem */}
          <div className="w-2 h-16 bg-gradient-to-b from-gray-100 to-gray-300 bg-opacity-80"></div>
          
          {/* Base */}
          <div className="w-16 h-2 rounded-full bg-gradient-to-b from-gray-200 to-gray-400"></div>
        </div>
      );
    } else {
      // Rocks glass
      return (
        <div className="w-32 h-32 relative">
          <div className="absolute top-0 left-0 right-0 bottom-0 border-2 border-gray-200 border-opacity-40 rounded-sm overflow-hidden">
            <div className="w-full h-3/4" style={getCocktailGradient(selectedCocktail.color)}></div>
          </div>
          <div className="absolute bottom-0 left-0 right-0 h-1 bg-gray-200 bg-opacity-30"></div>
        </div>
      );
    }
  };
  
  const renderGarnish = () => {
    if (selectedCocktail.garnish.includes("Cherry")) {
      return (
        <div className="absolute top-16 right-16 w-4 h-4 rounded-full bg-red-600 shadow-lg">
          <div className="absolute -top-3 left-2 w-1 h-3 bg-green-800 rounded-full transform rotate-12"></div>
        </div>
      );
    } else if (selectedCocktail.garnish.includes("Lime")) {
      return (
        <div className="absolute top-12 right-16 transform -rotate-12">
          <div className="w-8 h-2 rounded-full bg-lime-400"></div>
        </div>
      );
    }
    return null;
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-b from-gray-900 via-purple-950/20 to-black py-8 text-white">
      <h1 className="text-4xl font-bold mb-2 text-center">Liquid Alchemy</h1>
      <p className="text-center text-gray-400 mb-4">Unveiling the sensual artistry behind exquisite libations</p>
      
      {/* Dropdown selector */}
      <div className="relative mb-8 z-10 w-64">
        <button 
          className="w-full px-4 py-2 bg-gray-900 border border-amber-700/40 rounded-md flex items-center justify-between text-white shadow-lg hover:shadow-amber-800/30 transition-all"
          onClick={() => setShowDropdown(!showDropdown)}
        >
          <span>{selectedCocktail.name}</span>
          {showDropdown ? <ChevronUp size={20} className="text-amber-400" /> : <ChevronDown size={20} className="text-amber-400" />}
        </button>
        
        {showDropdown && (
          <div className="absolute top-full left-0 right-0 mt-1 bg-gray-800 border border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
            {cocktails.map((cocktail, index) => (
              <div 
                key={index}
                className="px-4 py-2 hover:bg-gray-700 cursor-pointer"
                onClick={() => {
                  setSelectedCocktail(cocktail);
                  setShowDropdown(false);
                }}
              >
                {cocktail.name}
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* Visualization area */}
      <div className="w-full max-w-4xl mx-auto relative">
        {/* Glass with cocktail */}
        <div className="flex justify-center items-center mb-6 min-h-60">
          {getGlassShape()}
          {renderGarnish()}
        </div>
        
        {/* Tabbed interface */}
        <div className="max-w-md mx-auto bg-gray-900 bg-opacity-80 p-6 rounded-lg backdrop-blur-md border border-gray-700 shadow-xl">
          <div className="flex border-b border-gray-700 mb-4">
            <button 
              className={`py-2 px-4 ${activeTab === 'recipe' ? 'border-b-2 border-amber-400 font-medium text-amber-300' : 'text-gray-400 hover:text-white'}`}
              onClick={() => setActiveTab('recipe')}
            >
              Recipe
            </button>
            <button 
              className={`py-2 px-4 ${activeTab === 'history' ? 'border-b-2 border-amber-400 font-medium text-amber-300' : 'text-gray-400 hover:text-white'}`}
              onClick={() => setActiveTab('history')}
            >
              History
            </button>
          </div>
          
          {/* Tab content */}
          <div>
            {activeTab === 'recipe' && (
              <div>
                <div className="mb-6">
                  <h3 className="text-lg font-semibold mb-3 text-transparent bg-clip-text bg-gradient-to-r from-amber-200 to-amber-400">Ingredients:</h3>
                  <div className="space-y-3">
                    {selectedCocktail.ingredients.map((ingredient, idx) => {
                      // Determine component category
                      const getComponentType = (name) => {
                        const lowerName = name.toLowerCase();
                        
                        if (lowerName.includes('whiskey') || lowerName.includes('bourbon') || 
                            lowerName.includes('vodka') || lowerName.includes('gin') || 
                            lowerName.includes('rum') || lowerName.includes('tequila') || 
                            lowerName.includes('mezcal') || lowerName.includes('brandy') || 
                            lowerName.includes('cognac')) {
                          return { type: 'spirit', label: 'Base Spirit', color: '#FF6B6B' };
                        } else if (lowerName.includes('syrup') || lowerName.includes('honey') || 
                                   lowerName.includes('sugar') || lowerName.includes('liqueur') || 
                                   lowerName.includes('sweet vermouth') || lowerName.includes('cointreau') || 
                                   lowerName.includes('st-germain')) {
                          return { type: 'sweet', label: 'Sweet', color: '#FFD93D' };
                        } else if (lowerName.includes('lemon') || lowerName.includes('lime') || 
                                   lowerName.includes('grapefruit') || lowerName.includes('vinegar')) {
                          return { type: 'sour', label: 'Sour', color: '#6BCB77' };
                        } else if (lowerName.includes('bitters') || lowerName.includes('campari') || 
                                   lowerName.includes('aperol') || lowerName.includes('fernet') || 
                                   lowerName.includes('dry vermouth')) {
                          return { type: 'bitter', label: 'Bitter', color: '#4D96FF' };
                        } else if (lowerName.includes('herb') || lowerName.includes('spice') || 
                                   lowerName.includes('mint') || lowerName.includes('cinnamon') || 
                                   lowerName.includes('lavender')) {
                          return { type: 'aromatic', label: 'Aromatic', color: '#9D65C9' };
                        } else if (lowerName.includes('egg') || lowerName.includes('cream') || 
                                   lowerName.includes('milk') || lowerName.includes('purée')) {
                          return { type: 'texture', label: 'Texture', color: '#F2C1D1' };
                        } else if (lowerName.includes('water') || lowerName.includes('soda') || 
                                   lowerName.includes('tonic') || lowerName.includes('ginger beer') || 
                                   lowerName.includes('prosecco') || lowerName.includes('champagne')) {
                          return { type: 'dilution', label: 'Dilution', color: '#8BD3E6' };
                        }
                        
                        return { type: 'other', label: 'Other', color: '#ABABAB' };
                      };

                      const componentInfo = getComponentType(ingredient.name);

                      return (
                        <div key={idx} className="relative">
                          <div className="flex justify-between mb-1">
                            <div className="flex items-center">
                              <span className="font-medium">{ingredient.name}</span>
                              <span 
                                className="ml-2 px-2 py-0.5 text-xs rounded-full" 
                                style={{ 
                                  backgroundColor: componentInfo.color,
                                  color: ['sweet', 'dilution'].includes(componentInfo.type) ? 'rgba(0,0,0,0.7)' : 'white'
                                }}
                              >
                                {componentInfo.label}
                              </span>
                            </div>
                            <span className="text-sm text-gray-300">{ingredient.amount} oz</span>
                          </div>
                          
                          {/* Beautiful scale visualization */}
                          <div className="h-3 w-full bg-gray-700 rounded-full overflow-hidden">
                            <div 
                              className="h-full rounded-full"
                              style={{ 
                                width: `${Math.min(100, (ingredient.amount / 2) * 100)}%`,
                                backgroundColor: selectedCocktail.color,
                                opacity: 0.8
                              }}
                            ></div>
                          </div>
                          
                          {/* Tick marks */}
                          <div className="w-full flex justify-between mt-1 px-1">
                            {[...Array(5)].map((_, i) => (
                              <div key={i} className="h-1 w-0.5 bg-gray-500"></div>
                            ))}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
                
                <div className="mb-4 grid grid-cols-2 gap-4">
                  <div>
                    <h3 className="text-lg font-semibold mb-1">Served in:</h3>
                    <p className="capitalize">{selectedCocktail.glassware} Glass</p>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold mb-1">Method:</h3>
                    <div className="flex items-center">
                      <div className="flex-1">{getMethodIcon(selectedCocktail.method)}</div>
                      <button 
                        className="ml-2 p-1 bg-gray-700 rounded-full hover:bg-gray-600"
                        onClick={() => setShowTutorial(true)}
                      >
                        <Info size={16} />
                      </button>
                    </div>
                  </div>
                </div>
                
                <div className="mb-4">
                  <h3 className="text-lg font-semibold mb-1">Garnish:</h3>
                  <p>{selectedCocktail.garnish}</p>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold mb-1">Description:</h3>
                  <p className="italic">{selectedCocktail.description}</p>
                </div>
                
                {/* Component Legend */}
                <div className="mt-6">
                  <h3 className="text-lg font-semibold mb-2">Cocktail Components:</h3>
                  <div className="grid grid-cols-2 gap-2">
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: '#FF6B6B' }}></div>
                      <span className="text-xs">Base Spirit</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: '#FFD93D' }}></div>
                      <span className="text-xs">Sweet</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: '#6BCB77' }}></div>
                      <span className="text-xs">Sour</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: '#4D96FF' }}></div>
                      <span className="text-xs">Bitter</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: '#9D65C9' }}></div>
                      <span className="text-xs">Aromatic</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: '#F2C1D1' }}></div>
                      <span className="text-xs">Texture</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: '#8BD3E6' }}></div>
                      <span className="text-xs">Dilution</span>
                    </div>
                    <div className="flex items-center">
                      <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: '#ABABAB' }}></div>
                      <span className="text-xs">Other</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {activeTab === 'history' && (
              <div>
                <h3 className="text-lg font-semibold mb-3">Cocktail History</h3>
                <p className="mb-4">{selectedCocktail.history}</p>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Method Tutorial Modal - Simple Version */}
      {showTutorial && (
        <div className="fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-gray-900 rounded-lg max-w-md w-full p-6 relative border border-gray-700 shadow-lg shadow-purple-900/20">
            <button 
              className="absolute top-2 right-2 text-gray-400 hover:text-white"
              onClick={() => setShowTutorial(false)}
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
            
            <h3 className="text-xl font-bold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-amber-300 to-pink-500">
              The Art of {selectedCocktail.method === "shaken" ? "Shaking" : 
               selectedCocktail.method === "stirred" ? "Stirring" : 
               "Building"} a Perfect Cocktail
            </h3>
            
            <div className="mb-4">
              <h4 className="font-semibold mb-2">Steps:</h4>
              {selectedCocktail.method === "shaken" && (
                <ol className="list-decimal pl-5 space-y-1">
                  <li>Fill a cocktail shaker with ice, about 2/3 full</li>
                  <li>Add all ingredients to the shaker</li>
                  <li>Secure the top of the shaker firmly</li>
                  <li>Hold shaker with both hands and shake vigorously for 10-15 seconds</li>
                  <li>Strain into appropriate glassware using a Hawthorne or fine mesh strainer</li>
                </ol>
              )}
              
              {selectedCocktail.method === "stirred" && (
                <ol className="list-decimal pl-5 space-y-1">
                  <li>Fill a mixing glass with ice, about 2/3 full</li>
                  <li>Add all ingredients to the mixing glass</li>
                  <li>Insert a bar spoon and stir gently in a circular motion</li>
                  <li>Stir for 20-30 seconds until properly chilled and diluted</li>
                  <li>Strain into appropriate glassware using a julep strainer</li>
                </ol>
              )}
            </div>
            
            <div>
              <h4 className="font-semibold mb-2">Why {selectedCocktail.method}?</h4>
              {selectedCocktail.method === "shaken" ? (
                <p>Shaking chills, dilutes, and aerates a cocktail. It's ideal for drinks with fruit juices, dairy, or egg whites that need to be properly integrated.</p>
              ) : (
                <p>Stirring gently chills and dilutes without aerating. It's perfect for spirit-forward cocktails where clarity and silky texture are desired.</p>
              )}
            </div>
            
            <button 
              className="mt-6 w-full py-2 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
              onClick={() => setShowTutorial(false)}
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CocktailVisualizer;